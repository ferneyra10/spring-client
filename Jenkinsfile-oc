pipeline {
  agent {
    label 'maven'
  }
  environment {
    PROJECT = 'ops-dev-dev'
  }   
 
  
  stages {
    stage('Validate') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject("${env.PROJECT}") {
              echo "Using project: ${openshift.project()}"
            }
          }
        }
      }
    }
    stage('Build') {
      steps {
        echo 'Build jar file'
        script {
          sh 'echo CompilandoProyecto'
          sh 'ls'
        }
      }
    }
    stage('Test') {
      steps {
        echo 'Run unit tests'
        script {
           sh 'ls'
        }
      }
    }
    stage('Clean') {
      steps {
        echo "Delete application"
        script {
          openshift.withCluster() {
            openshift.withProject("${env.PROJECT}") {
              openshift.selector("all", [  'app' : 'springclient' ]).delete()
            }
          }
        }
      }
    }
    stage('Deploy') {
      steps {
        echo "Deploy application"
        script {
          openshift.withCluster() {
            openshift.withProject("${env.PROJECT}") {
                      
              if(!openshift.selector("dc", "springclient").exists()){
                 openshift.newApp('registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift:1.6~https://github.com/ferneyra10/spring-client',
                                  "--as-deployment-config", 
                                  "--name=springclient", 
                                  "--strategy=source", 
                                  "--allow-missing-images", 
                                  "--build-env=\'JAVA_APP_JAR=hello.jar\'")
                              .narrow('svc')
                              .expose("--name=springclient  --generator=\'route/v1\'")
                              openshift.create( 'route', 'edge  springclient-edge',  '--service=springclient', '--insecure-policy=Redirect', '--path=/hello' )                                                                                        
              }

              timeout(5) { 
                openshift.selector("dc", "springclient").related('pods').untilEach(1) {
                  return (it.object().status.phase == "Running")
                  }
                }
            }
          }
        }
      }
    }
  }
}
